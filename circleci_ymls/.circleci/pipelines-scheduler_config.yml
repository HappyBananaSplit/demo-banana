version: 2.1

refs:
  clojure-service-image: &clojure-service-image
    image: circleci/clojure-service:0.8-dev
    auth:
      username: $DOCKER_HUB_USER
      password: $DOCKER_HUB_PASSWORD

executors:
  clojure-service:
    docker:
      - <<: *clojure-service-image
  ccc:
    docker:
      - image: circleci/command-convenience:0.1
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD

commands:
  set_version:
    description: >
      Set PIPELINES_SCHEDULER_VERSION and CONTAINER_VERSION
      If we don't set the CONTAINER_VERSION then ccc will use format ${MAJOR_VERSION}.${CIRCLE_BUILD_NUM}-$(git rev-parse --short HEAD) to create the docker tag
      but we would like to include pipeline number to keep the version numbers consistent for both service and cron deployments.
    steps:
      - run:
          name: Compute and set a single version
          command: |
            set -o errexit
            set -o nounset
            version="1.0.<<pipeline.number>>-${CIRCLE_SHA1:0:7}"
            echo "export PIPELINES_SCHEDULER_VERSION=${version}" >> ${CIRCLE_SHELL_ENV}
            echo "export CONTAINER_VERSION=${version}" >> ${CIRCLE_SHELL_ENV}
            echo ${version}
  build_scan_publish:
    parameters:
      jar-name:
        type: string
        default: pipelines-scheduler.jar
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Copy Jar
          command: cp /workspace/<< parameters.jar-name >> .
          working_directory: deploy
      - run:
          name: Build, Scan & Publish
          command: publish
          working_directory: deploy
  lein_deps:
    steps:
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "project.clj" }}
            - v1-dependencies-
      - run: lein deps
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "project.clj" }}
  run_postgres_migration:
    description: "Run pipelines-scheduler PostgreSQL migrations"
    steps:
      - run:
          name: Run PostgreSQL Migrations
          command: |
            createdb --username circle --owner=circle --host postgres pipelines_scheduler
            run-migrations
          environment:
            DATABASE_MIGRATIONS: migrator/sql
            DATABASE_USER: circle
            DATABASE_URL: "jdbc:postgresql://postgres:5432/pipelines_scheduler"

jobs:
  clj-kondo:
    resource_class: large
    executor: clojure-service
    steps:
      - checkout
      - lein_deps
      - restore_cache:
          keys:
            - v2-clj-kondo-{{ checksum "project.clj" }}
      - run:
          name: Update clj-kondo's cache
          command: |
            lein clj-kondo --lint "$(lein classpath)" \
                           --dependencies \
                           --parallel \
                           --copy-configs
      - save_cache:
          paths:
            - .clj-kondo/.config
          key: v2-clj-kondo-{{ checksum "project.clj" }}
      - run:
          name: Report on new clj-kondo violations
          command: lein clj-kondo --lint src test

  cljfmt:
    executor: clojure-service
    steps:
      - checkout
      - lein_deps
      - run: lein cljfmt check

  test:
    resource_class: large
    docker:
      - *clojure-service-image
      - image: rabbitmq:3.8-alpine
      - image: circleci/postgres:12-ram
        name: postgres
        environment:
          POSTGRES_USER: circle
          POSTGRES_DB: circle_test
          POSTGRES_HOST_AUTH_METHOD: trust
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    steps:
      - checkout
      - run:
          name: Install additional software
          command: |
            curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
            echo "deb http://apt.postgresql.org/pub/repos/apt/ buster-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list
            sudo apt-get update
            sudo apt-get install -y --no-install-recommends postgresql-client-12
      - lein_deps
      - run_postgres_migration
      - run:
          name: Dump migrated schema
          command: |
            PG_DUMP_COMMAND="pg_dump --host=postgres" PGUSER=circle ./scripts/dump-schema > /tmp/structure-after-migration.sql
            diff --ignore-blank-lines -u structure.sql /tmp/structure-after-migration.sql
      - run:
          name: Run Tests
          command: lein test --reporter documentation --plugin profiling --plugin junit-xml --junit-xml-file target/test-results/results.xml
          environment:
            PIPELINES_SCHEDULER__RABBITMQ__SCHEDULE_CHANGES_QUEUE: "schedule-changes"
            PIPELINES_SCHEDULER__RABBITMQ__SCHEDULE_TRIGGERS_QUEUE: "schedule-triggers"
            RABBITMQ__PIPELINES_SCHEDULER__URI: "amqp://guest:guest@localhost:5672"
            POSTGRESQL__PIPELINES_SCHEDULER__URI: "jdbc:postgresql://postgres:5432/pipelines_scheduler?user=circle&password=circle"
      - store_test_results:
          path: target/test-results

  uberjar:
    resource_class: large
    executor: clojure-service
    working_directory: ~/repo
    steps:
      - checkout
      - lein_deps
      - set_version
      - run:
          name: lein uberjar
          command: |
            lein uberjar
            mkdir -p /workspace
            cp target/pipelines-scheduler-${PIPELINES_SCHEDULER_VERSION}-standalone.jar /workspace/pipelines-scheduler.jar
      - persist_to_workspace:
          root: /workspace
          paths:
            - pipelines-scheduler.jar

  cron-uberjar:
    resource_class: large
    executor: clojure-service
    working_directory: ~/repo
    steps:
      - checkout
      - lein_deps
      - set_version
      - run:
          name: lein uberjar
          command: |
            lein with-profile +cron uberjar
            mkdir -p /workspace
            cp target/pipelines-scheduler-${PIPELINES_SCHEDULER_VERSION}-standalone.jar /workspace/pipelines-scheduler-cron.jar
      - persist_to_workspace:
          root: /workspace
          paths:
            - pipelines-scheduler-cron.jar

  build-scan-publish-service:
    executor: ccc
    environment:
      NAME: pipelines-scheduler
      DOCKERFILE_PATH: Dockerfile
      DOCKER_REGISTRY: all
    working_directory: ~/repo
    steps:
      - setup_remote_docker:
          version: 20.10.14
      - checkout
      - set_version
      - build_scan_publish
      - persist_to_workspace:
          root: deploy
          paths:
            - docker_image.tag

  build-scan-publish-cron:
    executor: ccc
    environment:
      NAME: pipelines-scheduler-cron
      DOCKERFILE_PATH: cron.Dockerfile
      DOCKER_REGISTRY: all
    working_directory: ~/repo
    steps:
      - setup_remote_docker:
          version: 20.10.14
      - checkout
      - set_version
      - build_scan_publish:
          jar-name: pipelines-scheduler-cron.jar
      - run: mv deploy/docker_image.tag deploy/docker_image_cron.tag
      - persist_to_workspace:
          root: deploy
          paths:
            - docker_image_cron.tag

  deploy-migrator:
    executor: ccc
    environment:
      NAME: pipelines-scheduler-migrator
      DEPLOY_TYPE: helm
      DOCKER_REGISTRY: all
      MIGRATIONS_SQL_PATH: sql
      VALUES_FILE: k8s-values.yaml
      ROLLBAR_ACCESS_TOKEN: "" # Prevent CCC from notifying Rollbar when migrator is deployed.
    working_directory: ~/repo
    steps:
      - checkout
      - set_version
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build and publish the pipelines-scheduler migrator image
          command: publish
          working_directory: migrator
      - run:
          name: Deploy pipelines-scheduler migrator
          command: deploy
          working_directory: migrator

  deploy-service:
    executor: ccc
    environment:
      NAME: pipelines-scheduler
      DEPLOY_TYPE: helm
      DOCKER_REGISTRY: all
      VALUES_FILE: service.yaml
    working_directory: ~/repo
    steps:
      - checkout
      - set_version
      - attach_workspace:
          at: /workspace
      - run: cp /workspace/docker_image.tag deploy
      - run:
          name: Deploy
          command: deploy
          working_directory: deploy

  deploy-cron:
    executor: ccc
    environment:
      NAME: pipelines-scheduler-cron
      DOCKER_REGISTRY: all
      VALUES_FILE: cron.yaml
    working_directory: ~/repo
    steps:
      - checkout
      - set_version
      - attach_workspace:
          at: /workspace
      - run: cp /workspace/docker_image_cron.tag deploy/docker_image.tag
      - run:
          name: Deploy
          command: deploy
          working_directory: deploy

workflows:
  build-test-deploy:
    jobs:
      - clj-kondo:
          context: org-global
      - cljfmt:
          context: org-global
      - test:
          context: org-global
      - uberjar:
          context: org-global
      - cron-uberjar:
          context: org-global
      - build-scan-publish-service:
          context: org-global
          requires:
            - uberjar
          filters:
            branches:
              only:
                - main
      - build-scan-publish-cron:
          context: org-global
          requires:
            - cron-uberjar
          filters:
            branches:
              only:
                - main
      - deploy-migrator:
          context: org-global
          requires:
            - test
            - uberjar
            - cron-uberjar
          filters:
            branches:
              only: main
      - deploy-service:
          context: org-global
          requires:
            - build-scan-publish-service
            - build-scan-publish-cron
            - deploy-migrator
          filters:
            branches:
              only:
                - main
      - deploy-cron:
          context: org-global
          requires:
            - build-scan-publish-service
            - build-scan-publish-cron
          filters:
            branches:
              only:
                - main
