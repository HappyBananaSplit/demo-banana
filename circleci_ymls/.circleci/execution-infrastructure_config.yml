version: 2.1

executors:
  default:
    docker:
      - image: circleci/terraform:1.1.3
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
  verification:
    machine: true
    environment:
      ARCH: amd64
      OS: linux

workflows:
  verification:
    when:
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ "verification", << pipeline.schedule.name >> ]
    jobs:
      - docker_verification

  the-workflow:
    when:
      not:
        equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - check_format:
          context: org-global
      - terraform:
          aws_access_key_id_env_var: "CCID_AWS_ACCESS_KEY_ID"
          aws_secret_access_key_env_var: "CCID_AWS_SECRET_ACCESS_KEY"
          name: terraform << matrix.tf_path >>
          context:
            - org-global
          requires:
            - check_format
          matrix:
            parameters:
              tf_path: 
                - "ccid/base"
                - "ccid/runner"
      - terraform:
          name: terraform << matrix.tf_path >>
          context:
            - org-global
            - execution-gcp-terraform-cicd
          requires:
            - check_format
          matrix:
            parameters:
              tf_path:
                - "cciexec/machine"
                - "cciexec/nomad/base"
                - "cciexec/nomad/clusters/alpha"
                - "cciexec/nomad/clusters/bravo"
                - "cciexec/nomad/clusters/charlie"
                - "cciexec/nomad/clusters/delta"
                - "cciexec/nomad/clusters/echo"
                - "cciexec/nomad/clusters/test-yankee"
                - "cciexec/nomad/clusters/test-zulu"
                - "gcp/machine"
                - "datadog"

jobs:
  check_format:
    executor: default
    steps:
      - checkout
      - run: terraform fmt -diff -check -recursive

  terraform:
    parameters:
      tf_path:
        type: string
      aws_access_key_id_env_var:
        type: string
        default: "AWS_ACCESS_KEY_ID"
      aws_secret_access_key_env_var:
        type: string
        default: "AWS_SECRET_ACCESS_KEY"
      executor:
        type: string
        default: "default"
    executor: << parameters.executor >>
    steps:
      - checkout
      - run: mkdir -p ${HOME}/.config/gcloud/
      - run: echo "${GCLOUD_SERVICE_KEY}" > "${HOME}/.config/gcloud/application_default_credentials.json"
      - run:
          name: Running Terraform
          environment:
            TF_PATH: << parameters.tf_path >>
          command: |
            export AWS_ACCESS_KEY_ID="$<< parameters.aws_access_key_id_env_var >>"
            export AWS_SECRET_ACCESS_KEY="$<< parameters.aws_secret_access_key_env_var >>"
            ./scripts/run-terraform.sh

  docker_verification:
    executor: verification
    steps:
      - checkout
      - run:
          name: install go
          working_directory: go
          command: |
            go_tar=$(mktemp)

            echo "Downlading Go"
            gopkg="go1.16.5.$OS-$ARCH"
            curl -o "${go_tar}" -sSL https://dl.google.com/go/${gopkg}.tar.gz

            mkdir go/

            echo "Installing Go"
            tar -C "${PWD}" -xvzf "${go_tar}"
            rm -rf "${go_tar}"

            echo "Adding Go to PATH"
            echo "export PATH=\"${PWD}/go/bin:$PATH\"" >> "$BASH_ENV"
            . "$BASH_ENV"

            go version

            echo "Adding GOPATH bin to PATH"
            echo 'export PATH="$PATH:$(go env GOPATH)/bin"' >> "$BASH_ENV"

      - checkout:
          path: project
      - run:
          command: go mod download
          working_directory: project
      - run:
          command: ./do install-devtools
          working_directory: project
      - run:
          name: start statsd datadog agent
          command: |
            docker run -d --name statsd \
              -e DD_API_KEY=${DD_API_KEY} \
              -e DD_DOGSTATSD_NON_LOCAL_TRAFFIC="true" \
              -p 8125:8125/udp \
              gcr.io/datadoghq/agent:latest
            sleep 10
      - run: docker logs statsd
      - run:
          name: run docker verification
          working_directory: project
          command: |
            go run ./scripts/verification/docker.go
