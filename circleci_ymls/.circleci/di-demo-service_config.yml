version: "2.1"

references:
  test_db_image: &test_db_image
    image: postgres:13.3
    environment:
      POSTGRES_USER: test
      POSTGRES_DB: didemo
      POSTGRES_HOST_AUTH_METHOD: trust

  clojure_image: &clojure_image
    image: circleci/clojure-service:0.7-dev
    auth:
      username: $DOCKER_HUB_USER
      password: $DOCKER_HUB_PASSWORD

  rabbit_mq_image: &rabbit_mq_image
    image: rabbitmq:3.7.11-alpine
    environment:
      RABBITMQ_NODE_PORT: 5674
      RABBITMQ_NODENAME: di-demo-service-events

executors:
  clojure:
    docker:
      - image: circleci/clojure-service:0.7-dev
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD

  ccc:
    docker:
      - image: circleci/command-convenience:0.1
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
        environment:
          NAME: di-demo-service
          DEPLOY_TYPE: helm
          DEPLOY_CONTAINER_NAME: 183081753049.dkr.ecr.us-east-1.amazonaws.com/circleci/di-demo-service
           
  integration:
    docker:
      - *clojure_image
      - *rabbit_mq_image
      - *test_db_image

commands:
  save-deps:
    steps:
      - save_cache:
          key: deps-v1-{{ checksum "project.clj" }}
          paths:
            - ~/.m2

  restore-deps:
    steps:
      - restore_cache:
          keys:
            - deps-v1-{{ checksum "project.clj" }}

  persist-target:
    steps:
      - persist_to_workspace:
          root: .
          paths:
            - target

  attach_target:
    steps:
      - attach_workspace:
          at: .

jobs:
  build-cache:
    executor: clojure
    steps:
      - checkout
      - restore-deps
      - run:
          name: Compile code
          command: lein javac
      - save-deps
      - persist-target

  build-uberjar:
    executor: clojure
    steps:
      - checkout
      - run:
          name: Build Uberjar
          command: |
            lein uberjar
            cp -v target/uberjar/di-demo-*-standalone.jar target/uberjar/di-demo-standalone.jar
      - persist_to_workspace:
          root: .
          paths:
            - target/uberjar/di-demo-standalone.jar

  test:
    executor: integration
    steps:
      - checkout
      - restore-deps
      - attach_target
      - run:
          name: Run db migrations
          command: lein with-profile +test flyway migrate
      - run:
          name: Run automated tests
          command: |
            lein with-profile +test kaocha
      - store_test_results:
          path: test-results

  dry-run-service:
    executor: ccc
    environment:
      NAME: di-demo-service
      VALUES_FILE: values.yml
    steps:
      - checkout
      - setup_remote_docker
      - run: /deploy/dry-run

  publish-and-deploy-service:
    executor: ccc
    environment:
      NAME: di-demo-service
      VALUES_FILE: values.yml
      DOCKER_REGISTRY: ecr
      DOCKERFILE_PATH: server.Dockerfile
      TWISTLOCK_ENFORCE: "false" # bypass lein problem
       
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_remote_docker
      - run: publish
      - run: deploy

  publish-and-deploy-migrator:
    executor: ccc
    environment:
      NAME: di-demo-service-migrator
      VALUES_FILE: migrator-values.yml
      DOCKER_REGISTRY: ecr
      DEPLOY_CONTAINER_NAME: 183081753049.dkr.ecr.us-east-1.amazonaws.com/circleci/di-demo-service-migrator
      MIGRATIONS_SQL_PATH: migrations
      ROLLBAR_ACCESS_TOKEN: "" # Prevent CCC from notifying Rollbar when migrator is deployed.
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_remote_docker
      - run: publish
      - run: deploy

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build-cache:
          context: org-global
      - build-uberjar:
          context: org-global
          requires:
            - build-cache
      - test:
          context: org-global
          requires:
            - build-cache
      - dry-run-service:
          context: org-global
          requires:
            - build-cache
      - publish-and-deploy-migrator:
          context: org-global
          requires:
            - test
            - build-uberjar
          filters:
            branches:
              only: main
      - publish-and-deploy-service:
          context: org-global
          requires:
            - publish-and-deploy-migrator
          filters:
            branches:
              only: main
