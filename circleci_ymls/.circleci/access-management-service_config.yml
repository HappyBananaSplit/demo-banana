version: 2.1

orbs:
  codecov: codecov/codecov@1.2.2
  snyk: cci-internal/snyk-vuln-scanner@0.3.1

references:
  clojure_image: &clojure_image
    image: circleci/clojure-service:0.8-dev
    auth:
      username: $DOCKER_HUB_USER
      password: $DOCKER_HUB_PASSWORD
  test_db_image: &test_db_image
    image: postgres:13.3-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: accessmanagementservice
      POSTGRES_HOST_AUTH_METHOD: trust
  working_directory: &working_directory
    working_directory: ~/access-management-service

executors:
  clj:
    docker:
      - image: circleci/clojure-service:0.8-dev
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD

  ccc:
    docker:
      - image: circleci/command-convenience:0.1
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD

  test:
    docker:
      - *clojure_image
      - *test_db_image
    environment:
      POSTGRESQL__ACCESSMANAGEMENTSERVICE__URI: jdbc:postgresql://localhost:5432/accessmanagementservice?user=postgres
      FLYWAY_DB_URL: jdbc:postgresql://localhost:5432/accessmanagementservice?user=postgres

commands:
  restore-deps:
    description: "Restore maven deps from cache and run lein deps"
    steps:
      - restore_cache:
          keys:
            - maven-{{ checksum "project.clj" }}
            - maven
      - run:
          name: Fetch dependencies
          command: lein with-profile dev deps
  save-deps:
    description: "Save maven deps to cache"
    steps:
      - save_cache:
          key: maven-{{ checksum "project.clj" }}
          paths:
            - ~/.m2

jobs:
  # Initialize the environment by pulling maven dependencies into ~/.m2 and caching them for future
  # steps and future builds.
  init-service:
    executor:
      name: clj
    working_directory: ~/access-management-service
    steps:
      - checkout:
          path: ~/access-management-service
      - restore-deps
      - save-deps

  # Build the uberjar (the standalone JAR file that ends up deployed in production)
  build-service-uberjar:
    executor:
      name: clj
    working_directory: ~/access-management-service
    steps:
      - checkout:
          path: ~/access-management-service
      - restore-deps
      - run:
          name: Build uberjar
          command: |
            lein uberjar
            cp -v target/uberjar/access-management-service-*-standalone.jar target/access-management-service-standalone.jar
      - persist_to_workspace:
          root: .
          paths:
            - target/access-management-service-standalone.jar
  # Runs linters on the Clojure code
  lint-service:
    executor:
      name: clj
    working_directory: ~/access-management-service
    steps:
      - checkout:
          path: ~/access-management-service
      - restore-deps
      - run: lein clj-kondo
      - run: lein eastwood
  # Runs all the Clojure tests
  test-service:
    executor:
      name: test
    steps:
      - checkout
      - restore-deps
      - run: lein flyway migrate
      - run: lein test-ci
      - store_test_results:
          path: target/test-results
      - codecov/upload

  dry-run-service:
    executor:
      name: ccc
    environment:
      NAME: access-management-service
      VALUES_FILE: k8s-values.yml
    working_directory: ~/access-management-service
    steps:
      - checkout:
          path: ~/access-management-service
      - setup_remote_docker
      - attach_workspace:
          at: .
      - run:
          command: /deploy/dry-run

  # Runs a Twistlock/Prisma scan on feature branches
  # See https://github.com/circleci/engineering/blob/master/howto/prisma-scan-for-vulns.md
  scan-service:
    executor:
      name: ccc
    environment:
      NAME: access-management-service
      DEPLOY_CLOJURE_JARFILE: target/access-management-service-standalone.jar
    working_directory: ~/access-management-service
    steps:
      - checkout:
          path: ~/access-management-service
      - setup_remote_docker
      - attach_workspace:
          at: .
      - run: scan
      - store_artifacts:
          path: ccc-image-scan-results
          destination: access-management-service/ccc-image-scan-results

  check-schema:
    <<: *working_directory
    docker:
      - *clojure_image
      - *test_db_image
    steps:
      - checkout
      - run:
          name: Install PostgreSQL client
          command: |
            apt-get update \
              && apt-get upgrade -y \
              && apt-get install postgresql-client-13
      - run:
          name: Run DB migrations
          command: ./migrations/dev/run_flyway.sh ./migrations migrate
          environment:
            DATABASE_HOST: localhost
            DATABASE_NAME: accessmanagementservice
            DATABASE_USER: postgres
            DATABASE_SCHEMAS: public
            DATABASE_SCHEMA_TABLE: schema_version
      - run:
          name: Dump migrated schema
          command: |
            FILENAME="schema-after.sql" PG_DUMP_COMMAND="pg_dump --host=localhost" \
              ./scripts/dump-schema
      - run:
          name: Check that schema.sql matches for migrations
          command: |
            # If the `diff` exit code is not zero, the schema.sql file is
            # out-of date. Generate the schema.sql file locally with
            # ./scripts/dump-schema and check in to source control.
            diff schema.sql schema-after.sql        

  deploy-migrator:
    executor: ccc
    environment:
      NAME: access-management-service-migrator
      DOCKER_REGISTRY: all
      DEPLOY_TYPE: helm
      IMAGE_NAME: "circleci/access-management-service-migrator"
      CONFIGURE_ECR_REPO: "true"
      ECR_OWNER_TEAM: Identities
      MIGRATIONS_SQL_PATH: migrations
      VALUES_FILE: migrations/k8s-values.yml
      ROLLBAR_ACCESS_TOKEN: "" # Prevent CCC from notifying Rollbar when migrator is deployed.
    working_directory: ~/access-management-service
    steps:
      - checkout:
          path: ~/access-management-service
      - setup_remote_docker
      - run: publish
      - run: deploy

  # Publishes to ECR/Docker Hub and deploys the service on main and canary branches
  publish-deploy-service:
    executor:
      name: ccc
    environment:
      NAME: access-management-service
      IMAGE_NAME: "circleci/access-management-service"
      CONFIGURE_ECR_REPO: "true"
      ECR_OWNER_TEAM: Identities
      DEPLOY_CLOJURE_JARFILE: target/access-management-service-standalone.jar
      DEPLOY_TYPE: helm
      DOCKER_REGISTRY: all
      VALUES_FILE: k8s-values.yml
    working_directory: ~/access-management-service
    steps:
      - checkout:
          path: ~/access-management-service
      - setup_remote_docker
      - attach_workspace:
          at: .
      - when:
          condition:
            not: # exclusive rather than inclusive to protect against branches being renamed
              equal: [main, << pipeline.git.branch >>]
          steps:
            - run:
                name: Configure canary
                command: |
                  # These override default values from CCC and the executor.
                  echo "export RELEASE_VERSION=canary" >> "${BASH_ENV}"
                  echo "export ROLLBAR_ENVIRONMENT=canary" >> "${BASH_ENV}"
                  echo "export VALUES_FILE=canary.yml" >> "${BASH_ENV}"
                  /deploy/merge-values k8s-values.yml canary-overrides.yml > canary.yml
      - run: publish
      - run: deploy

workflows:
  dd:
    jobs:
      - init-service
  deploy:
    jobs:
      - init-service:
          context: org-global
      - build-service-uberjar:
          context: org-global
          requires:
            - init-service
      - lint-service:
          context: org-global
          requires:
            - init-service
      - test-service:
          context: org-global
          requires:
            - init-service
      - check-schema:
          context: org-global
          requires:
            - init-service
      - dry-run-service:
          context: org-global
          filters:
            branches:
              ignore:
                - main
                - canary
      - scan-service:
          context: org-global
          requires:
            - build-service-uberjar
          filters:
            branches:
              # fret not, scans are run on main and canary too, as part of the real publish
              ignore:
                - main
                - canary      
      - deploy-migrator:
          context: org-global
          requires:
            - test-service
            - lint-service
            - scan-service
            - dry-run-service
            - check-schema
          filters:
            branches:
              only: main
      - publish-deploy-service:
          context: org-global
          requires:
            - build-service-uberjar
            - lint-service
            - test-service
            - scan-service
            - dry-run-service
          filters:
            branches:
              only:
                - main
                - canary

# VS Code Extension Version: 1.4.0