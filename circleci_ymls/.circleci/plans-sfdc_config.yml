version: 2.1

executors:
  # Base Docker image for Clojure services
  # https://github.com/circleci/clojure-service-image
  clj:
    docker:
      - image: circleci/clojure-service:java11-0.7-dev
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
  # Docker image for container-related shorthands
  # https://github.com/circleci/command-convenience-containers
  ccc:
    docker:
      - image: circleci/command-convenience:0.1
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD

commands:
  restore-deps:
    description: "Restore maven deps from cache and run lein deps"
    steps:
      - restore_cache:
          keys:
            - maven-{{ checksum "project.clj" }}
            - maven
      - run:
          name: Fetch dependencies
          command: lein with-profile dev deps
  save-deps:
    description: "Save maven deps to cache"
    steps:
      - save_cache:
          key: maven-{{ checksum "project.clj" }}
          paths:
            - ~/.m2

jobs:
  # Initialize the environment by pulling maven dependencies into ~/.m2 and caching them for future
  # steps and future builds.
  init-service:
    executor:
      name: clj
    working_directory: ~/plans-sfdc
    steps:
      - checkout:
          path: ~/plans-sfdc
      - restore-deps
      - save-deps

  # Build the uberjar (the standalone JAR file that ends up deployed in production)
  build-service-uberjar:
    executor:
      name: clj
    working_directory: ~/plans-sfdc
    steps:
      - checkout:
          path: ~/plans-sfdc
      - restore-deps
      - run:
          name: Build uberjar
          command: |
            lein uberjar
            cp -v target/uberjar/plans-sfdc-*-standalone.jar target/plans-sfdc-standalone.jar
      - persist_to_workspace:
          root: .
          paths:
            - target/plans-sfdc-standalone.jar

  # Runs linters on the Clojure code
  lint-service:
    executor:
      name: clj
    working_directory: ~/plans-sfdc
    steps:
      - checkout:
          path: ~/plans-sfdc
      - restore-deps
      - run: lein clj-kondo

  # Runs all the Clojure tests
  test-service:
    executor:
      name: clj
    working_directory: ~/plans-sfdc
    steps:
      - checkout:
          path: ~/plans-sfdc
      - restore-deps
      # See the project.clj file for the differences between test and test-ci:
      # Usually this means `test` plus coverage and junit output plugins
      - run: lein test-ci
      - store_test_results:
          path: target/test-results

  # Outputs the helm diff compared to helm's production charts
  dry-run-service:
    executor:
      name: ccc
    environment:
      # These need to match the variables in your deployment job to get a meaningful diff
      NAME: plans-sfdc
      VALUES_FILE: k8s-values.yml
    working_directory: ~/plans-sfdc
    steps:
      - checkout:
          path: ~/plans-sfdc
      - setup_remote_docker
      - run: /deploy/dry-run

  # Runs a Twistlock/Prisma scan on feature branches
  # See https://github.com/circleci/engineering/blob/master/howto/prisma-scan-for-vulns.md
  scan-service:
    executor:
      name: ccc
    environment:
      NAME: plans-sfdc
      DEPLOY_CLOJURE_JARFILE: target/plans-sfdc-standalone.jar
      DEPLOY_CLOJURE_JARFILE_JAVA_VERSION: 11
      TWISTCLI_DEBUG: true
    working_directory: ~/plans-sfdc
    steps:
      - checkout:
          path: ~/plans-sfdc
      - setup_remote_docker
      - attach_workspace:
          at: .
      - run: scan
      - store_artifacts:
          path: ccc-image-scan-results
          destination: plans-sfdc/ccc-image-scan-results

  # Publishes to ECR and deploys the service on main branch
  publish-deploy-service:
    executor:
      name: ccc
    environment:
      NAME: plans-sfdc
      DOCKERFILE_PATH: Dockerfile
      DOCKER_REGISTRY: ecr
      VALUES_FILE: k8s-values.yml
    working_directory: ~/plans-sfdc
    steps:
      - checkout:
          path: ~/plans-sfdc
      - setup_remote_docker
      - attach_workspace:
          at: .
      - run: publish
      - run: deploy

workflows:
  deploy:
    jobs:
      - init-service:
          context: org-global
      - build-service-uberjar:
          context: org-global
          requires:
            - init-service
      - lint-service:
          context: org-global
          requires:
            - init-service
      - test-service:
          context: org-global
          requires:
            - init-service
      - dry-run-service:
          context: org-global
          requires:
            - init-service
          filters:
            branches:
              # diffs are included automatically by actual deploys
              ignore:
                - main
                - canary
      - scan-service:
          context: org-global
          requires:
            - build-service-uberjar
          filters:
            branches:
              # fret not, scans are run on main as part of the real publish
              ignore:
                - main
      - publish-deploy-service:
          context:
            - org-global
          requires:
            - build-service-uberjar
            - lint-service
            - test-service
          filters:
            branches:
              only:
                - main
