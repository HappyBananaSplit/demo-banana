version: 2.1

orbs:
  snyk: snyk/snyk@1.1.2

workflows:
  main-workflow:
    jobs:
      - lint:
          context: [github-readonly]
      - test:
          context: [github-readonly]
      - security-scans:
          context: [github-readonly, security-scanning]
      - setup-docker-image:
          context: [org-global, github-readonly, security-scanning]
          requires:
            - lint
            - test
      - setup-deploy:
          context: [org-global, github-readonly]
          filters:
            branches:
              only:
                - main
          requires:
            - lint
            - test
            - setup-docker-image

executors:
  default:
    docker:
      - image: &goimage cimg/go:1.18
  ccc:
    docker:
      - image: 'circleci/command-convenience:0.1'
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    environment:
      NAME: << pipeline.parameters.release-name >>
      DOCKERFILE_PATH: Dockerfile
      CUSTOM_CHART: deploy
      CONFIGURE_ECR_REPO: true
      DOCKER_REGISTRY: ecr
      EXTRA_DOCKER_BUILD_ARGS: --secret id=github_user,env=GITHUB_USER --secret id=github_token,env=GITHUB_TOKEN
      ECR_OWNER_TEAM: Security
      NAMESPACE: security

parameters:
  release-name:
    type: string
    default: secrets-service

jobs:
  lint:
    docker:
      - image: *goimage
    resource_class: large
    steps:
      - setup
      - run:
          name: generate
          command: go generate -x ./...
      - run:
          name: go tidy
          command: go mod tidy -v
      - run:
          name: verify no changes
          command: git diff --ignore-matching-lines='Generated on ' --exit-code
      - run: mkdir -p test-reports
      - run: golangci-lint run -c .golangci.yml ./... --out-format junit-xml | tee test-reports/lint.xml
      - store_results

  setup-docker-image:
    executor: ccc
    environment:
      NAME: secrets-service
      DOCKERFILE_PATH: Dockerfile
      IMAGE_NAME: circleci/secrets-service
      DOCKER_BUILDKIT: 1
    steps:
      - when:
          condition: << pipeline.parameters.release-name >>
          steps:
            - checkout
            - attach_workspace:
                at: .
            - create_and_scan_docker_image
            - persist_to_workspace:
                root: .
                paths:
                  - docker_image.tag
      - unless:
          condition: << pipeline.parameters.release-name >>
          steps:
            - run: echo add release-name to enable this job

  security-scans:
    docker:
      - image: cimg/go:1.18
    steps:
      - checkout
      - run: git config --global url."https://$GITHUB_USER:$GITHUB_TOKEN@github.com/circleci/".insteadOf "https://github.com/circleci/"
      - when:
          condition:
            equal: [ main, << pipeline.git.branch >> ]
          steps:
            - run:
                name: Running snyk CLI on main branch; uploading results
                command: echo "We are running snyk scan and uploading the results"
            - snyk/scan:
                fail-on-issues: false
                severity-threshold: high
                monitor-on-build: true
                project: 'circleci/${CIRCLE_PROJECT_REPONAME}'
                organization: circleci-78h
      - unless:
          condition:
            equal: [ main, << pipeline.git.branch >> ]
          steps:
            - run:
                name: Running snyk CLI on branch; no results uploading
                command: >-
                  echo "We are running snyk scan locally and NOT uploading the
                  branch scan results"
            - snyk/scan:
                fail-on-issues: false
                severity-threshold: high
                monitor-on-build: false
                project: 'circleci/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}'
                organization: circleci-78h

  test:
    docker:
      - image: *goimage
        environment:
          VAULT_ADDR: 'http://0.0.0.0:8200'
          VAULT_TOKEN: vault-plaintext-root-token
      - image: 'circleci/postgres:13.3-ram'
        environment:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: secretsservice
      - image: 'vault:latest'
        environment:
          VAULT_ADDR: 0.0.0.0
          VAULT_DEV_ROOT_TOKEN_ID: vault-plaintext-root-token
    resource_class: large
    steps:
      - setup
      - run: export DATABASE_URL=postgres://user:password@127.0.0.1:5432/secretsservice
      - run: go run ./cmd/migrate
      - run:
          name: initialize vault
          command: |
            curl --header "X-Vault-Token: ${VAULT_TOKEN}" --request POST --data '{"type":"transit"}' "${VAULT_ADDR}/v1/sys/mounts/transit"
            curl --header "X-Vault-Token: ${VAULT_TOKEN}" --request POST "${VAULT_ADDR}/v1/transit/keys/my-key"
      - run:
          name: run tests
          command: |
            mkdir -p test-reports
            # -count=1 is used to forcibly disable test result caching
            gotestsum --junitfile="test-reports/junit.xml" -- -race -count=1 "${@:-./...}" -coverprofile=coverage.out -coverpkg=./...
            go tool cover -html=coverage.out -o coverage.html
            mv coverage.html /tmp/test-results
      - store_artifacts:
          path: /tmp/artifacts
      - store_results

  setup-deploy:
    executor: ccc
    environment:
      AWS_DEFAULT_REGION: us-east-1
    steps:
      - when:
          condition: << pipeline.parameters.release-name >>
          steps:
            - checkout
            - attach_workspace:
                at: .
            - run: deploy
            - notify_slack:
                version: $(<target/version.txt)
            - notify_honeycomb
      - unless:
          condition: << pipeline.parameters.release-name >>
          steps:
            - run: echo add release-name to enable this job

  setup-helm-package-dry-run:
    executor: ccc
    steps:
      - when:
          condition: << pipeline.parameters.release-name >>
          steps:
            - checkout
            - run:
                name: Override container version & dry run
                command: |
                  apk add yq
                  AWS_ACCESS_KEY_ID="${EKS_AWS_ACCESS_KEY_ID}" \
                  AWS_SECRET_ACCESS_KEY="${EKS_AWS_SECRET_ACCESS_KEY}" \
                  helm get all << pipeline.parameters.release-name >> > .helm.current
                  export CONTAINER_VERSION=$(tail -n +11 .helm.current | yq r - 'deployment.image' | cut -d ":" -f2-)
                  echo "Current version is: ${CONTAINER_VERSION}"
                  /deploy/dry-run
                  ls -la .helm.diff
            - run:
                name: Install GitHub CLI
                command: |
                  curl -fsSL 'https://github.com/cli/cli/releases/download/v1.11.0/gh_1.11.0_linux_amd64.tar.gz' | tar -C /usr/local --strip-components=1 -xz
            - run:
                name: Comment on pull request
                command: |
                  if [ ! -s ".helm.diff" ]
                  then
                    echo "No diff found"
                    exit 0
                  fi
                  if [ ! -n "$CI_PULL_REQUEST" ]
                  then
                    echo "No PR found"
                    exit 0
                  fi
                  echo "## Helm diff: <sup>[CI link]( $CIRCLE_BUILD_URL )</sup>" > comment.txt
                  echo '<details><summary>Details (click me)</summary>' >> comment.txt
                  echo '' >> comment.txt
                  echo '```diff' >> comment.txt
                  cat '.helm.diff' >> comment.txt
                  echo '```' >> comment.txt
                  echo '</details>' >> comment.txt
                  echo "Commenting on ${CI_PULL_REQUEST}"
                  gh pr comment "${CI_PULL_REQUEST}" --body-file comment.txt
      - unless:
          condition: << pipeline.parameters.release-name >>
          steps:
            - run: echo add release-name to enable this job

commands:
  notify_slack:
    parameters:
      version:
        type: string
    steps:
      - run:
          name: Slack Notification
          command: |
            # Provide error if no webhook is set and error. Otherwise continue
            if [ -z "${SLACK_WEBHOOK}" ]; then
              echo '$SLACK_WEBHOOK not set. No notification will be sent'
              exit 0
            fi
            version=$(<docker_image.tag)
            message=$(git show HEAD --no-patch --format=%s | jq -R '.' | sed -e 's/^"//' -e 's/"$//')
            cat \<< EOF | tee /tmp/slack-webhook-body
            {
            	"blocks": [
            		{
            			"type": "header",
            			"text": {
            				"type": "plain_text",
            				"text": "Helm deployment triggered",
            				"emoji": true
            			}
            		},
            		{
            			"type": "section",
            			"fields": [
            				{
            					"type": "mrkdwn",
            					"text": "*Project:*\n$CIRCLE_PROJECT_REPONAME"
            				},
            				{
            					"type": "mrkdwn",
            					"text": "*Author:*\n$CIRCLE_USERNAME"
            				}
            			]
            		},
            		{
            			"type": "section",
            			"fields": [
            				{
            					"type": "mrkdwn",
            					"text": "*Version:*\n<<parameters.version>>"
            				},
            				{
            					"type": "mrkdwn",
            					"text": "*CircleCI Build:*\n<$CIRCLE_BUILD_URL|$CIRCLE_BUILD_NUM>"
            				}
            			]
            		},
            		{
            			"type": "section",
            			"text": {
            				"type": "mrkdwn",
            				"text": "*Commit Message:*\n$message"
            			}
            		}
            	]
            }
            EOF
            curl --fail -H 'Content-type: application/json' \
                --data @/tmp/slack-webhook-body "${SLACK_WEBHOOK}"

  notify_honeycomb:
    steps:
      - run:
          name: Notify Honeycomb
          command: |
            cat \<< EOF | tee /tmp/honeycomb-marker
            {
              "message": "Deploying example≠ $(<docker_image.tag)",
              "type":"deploy"
            }
            EOF
            curl https://api.honeycomb.io/1/markers/execution \
              -H "X-Honeycomb-Team: $HONEYCOMB_WRITEKEY" \
              -d @/tmp/honeycomb-marker

  setup:
    steps:
      - checkout
      - run: git config --global url."https://$GITHUB_USER:$GITHUB_TOKEN@github.com/circleci/".insteadOf "https://github.com/circleci/"
      - run: export GOPRIVATE=github.com/circleci/*
      - run: go mod download
      - run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.45.2
      - run: go install gotest.tools/gotestsum@latest

  store_results:
    steps:
      - run:
          name: Strip ANSI codes from xunit output
          when: always
          command: |
            # The test output produces ANSI codes, which the XML writer converts into annoying
            # \0xfffd characters - we'll strip these out to make the XML a bit
            more readable
            sed -i 's/�\[[0-9;]*[a-zA-Z]//g' test-reports/*.xml || true
      - store_artifacts:
          path: test-reports
      - store_test_results:
          path: test-reports

  remote_docker:
    steps:
      - setup_remote_docker:
          version: 20.10.11
          docker_layer_caching: true
      - run: docker version

  create_and_scan_docker_image:
    steps:
      - remote_docker
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: create and scan docker image
          command: |
            set -x
            if [[ "$CIRCLE_BRANCH" = "main" || "$CIRCLE_BRANCH" = "canary" ]];
            then
              # TODO change to all once dockerhub repo is ready
              export DOCKER_REGISTRY=ecr
            else
              # this is how we tell CCC not to actually publish
              export DOCKER_REGISTRY=none
            fi
            publish
