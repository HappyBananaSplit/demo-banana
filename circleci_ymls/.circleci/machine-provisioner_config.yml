version: 2.1

x-data:
  big_resource_class: &big_resource_class
    resource_class: xlarge
    environment:
      GOMAXPROCS: 8

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  slack: circleci/slack@4.4.4

workflows:
  main-workflow:
    when:
      not:
        equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - lint
      - test
#      - test-windows
      - build
      - db-schema:
          context: org-global
      - helm-package-dry-run:
          context: org-global
          filters:
            branches:
              ignore: main
      - docker-image:
          context: org-global
          requires:
            - lint
            - test
            - build
      - migrator-image:
          context: org-global
      - deploy:
          context: org-global
          requires:
            - db-schema
            - docker-image
            - migrator-image
            - helm-package-dry-run
          filters:
            branches:
              only: main

  compute_cleanup:
    when:
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ "gc", << pipeline.schedule.name >> ]
    jobs:
      - gc

executors:
  default:
    docker:
      - image: &goimage cimg/go:1.18
  ccc:
    docker:
      - image: circleci/command-convenience:0.1
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    environment:
      NAME: machine-provisioner
      DOCKERFILE_PATH: Dockerfile
      CUSTOM_CHART: deploy/

jobs:
  lint:
    <<: *big_resource_class
    docker:
      - image: *goimage
    steps:
      - setup
      - run:
          name: generate
          command: ./do generate
      - run:
          name: go tidy
          command: go mod tidy -v
      - run:
          name: verify no changes
          command: git diff --exit-code
      - run: ./do lint-report
      - store_results
      - notify_failing_main

  build:
    <<: *big_resource_class
    docker:
      - image: *goimage
    steps:
      - setup
      - run: ./do generate
      - run: ./do build
      - persist_to_workspace:
          root: .
          paths:
            - target
      - notify_failing_main

  docker-image:
    executor: ccc
    steps:
      - checkout
      - attach_workspace:
          at: .
      - create_and_scan_docker_image
      - persist_to_workspace:
          root: .
          paths:
            - docker_image.tag
      - notify_failing_main

  migrator-image:
    executor: ccc
    environment:
      DOCKERFILE_PATH: ""
      NAME: machine-provisioner-migrator
      MIGRATIONS_SQL_PATH: "migrations/sql"
      TWISTLOCK_ENFORCE: "false"
    steps:
      - create_and_scan_docker_image
      - run: mv docker_image.tag docker_image.migrator.tag
      - persist_to_workspace:
          root: .
          paths:
            - docker_image.migrator.tag
      - notify_failing_main

  test:
    <<: *big_resource_class
    docker:
      - image: *goimage
      - image: circleci/postgres:13.3-ram
        environment:
          POSTGRES_USER: provisioner
          POSTGRES_PASSWORD: provisioner
          POSTGRES_DB: provisioner
      - image: circleci/redis:5.0.6-alpine
        command: ["--databases", "1000000"]
    steps:
      - setup
      - run: ./do create-stub-test-files
      - run:
          name: run tests
          command: ./do test
      - store_results
      - notify_failing_main

#  test-windows:
#    resource_class: windows.xlarge
#    machine:
#      image: windows-server-2019-vs2019:stable
#    steps:
#      - run:
#          name: Install Go
#          command: |
#            time curl -o "/c/go.zip" "https://dl.google.com/go/go1.18.2.windows-amd64.zip"
#            time rm -rf "/c/Program Files/Go"
#            time unzip -q -d "/c/Program Files" "/c/go.zip"
#            go version
#      - setup
#      - run:
#          name: run tests
#          environment:
#            CGO_ENABLED: "0"
#            GOTESTFLAGS: "-count=1"
#          command: ./do test ./provider/startupscript/...
#      - store_results
#      - notify_failing_main

  deploy:
    executor: ccc
    environment:
      AWS_DEFAULT_REGION: us-east-1
    steps:
      - checkout
      - attach_workspace:
          at: .
      - aws-cli/setup:
          profile-name: cci
          aws-access-key-id: BINARY_S3_AWS_ACCESS_KEY_ID
          aws-secret-access-key: BINARY_S3_AWS_SECRET_ACCESS_KEY
      - run: apk --no-cache add openssl jq
      - run: ./do publish-s3-binaries
      - run: ./do release-s3-binaries
      - run:
          name: substitute migrator values
          command: |
            MIGRATOR_VERSION="$(< docker_image.migrator.tag)"
            sed -i.bak "s|\<<migrator_image_name>>|183081753049.dkr.ecr.us-east-1.amazonaws.com/circleci/machine-provisioner-migrator:${MIGRATOR_VERSION}|g" deploy/values.yaml
      - run: deploy
      - notify_slack:
          version: $(<target/version.txt)
      - notify_failing_main
      - notify_honeycomb

  db-schema:
    machine:
      image: ubuntu-2004:current
    steps:
      - checkout
      - run:
          name: docker login
          command: >
            echo $DOCKER_HUB_PASSWORD |
            docker login --username $DOCKER_HUB_USER --password-stdin
      - run: ./do schema
      - run:
          name: Check that the DB schema dump matches migrations
          command: |
            # If the `diff` exit code is not zero, the migrations/schema.sql file is
            # out-of date.
            # Run ./do schema locally to update it
            git diff --exit-code
      - notify_failing_main

  helm-package-dry-run:
    executor: ccc
    steps:
      - checkout
      - run:
          name: Override container version & dry run
          command: |
            helm_out=$(AWS_ACCESS_KEY_ID="${EKS_AWS_ACCESS_KEY_ID}" \
              AWS_SECRET_ACCESS_KEY="${EKS_AWS_SECRET_ACCESS_KEY}" \
              helm get values -a -o json machine-provisioner-v1)
            export MIGRATOR_VERSION=$(echo "${helm_out}" | jq -r '.deployment.migrationImage' | cut -d ":" -f2-)
            sed -i.bak "s|\<<migrator_image_name>>|183081753049.dkr.ecr.us-east-1.amazonaws.com/circleci/machine-provisioner-migrator:${MIGRATOR_VERSION}|g" deploy/values.yaml
            echo "Current migrator version is: ${MIGRATOR_VERSION}"
            IGNORE_VERSION=1 /deploy/dry-run
            ls -la .helm.diff
      - run:
          name: Install GitHub CLI
          command: |
            curl -fsSL 'https://github.com/cli/cli/releases/download/v1.11.0/gh_1.11.0_linux_amd64.tar.gz' | tar -C /usr/local --strip-components=1 -xz
      - run:
          name: Comment on pull request
          command: |
            if [ ! -s ".helm.diff" ]
            then
              echo "No diff found"
              exit 0
            fi
            if [ ! -n "$CI_PULL_REQUEST" ]
            then
              echo "No PR found"
              exit 0
            fi
            echo "## Helm diff: <sup>[CI link]( $CIRCLE_BUILD_URL )</sup>" > comment.txt
            echo '<details><summary>Details (click me)</summary>' >> comment.txt
            echo '' >> comment.txt
            echo '```diff' >> comment.txt
            cat '.helm.diff' >> comment.txt
            echo '```' >> comment.txt
            echo '</details>' >> comment.txt
            echo "Commenting on ${CI_PULL_REQUEST}"
            gh pr comment "${CI_PULL_REQUEST}" --body-file comment.txt

  gc:
    executor: default
    steps:
      - setup
      - run: go run ./cmd/ci/gc
      - notify_failing_main

commands:
  setup:
    steps:
      - checkout
      - run: go mod download
      - run: ./do install-devtools

  store_results:
    steps:
      - run:
          name: Strip ANSI codes from xunit output
          when: always
          command: |
            # The test output produces ANSI codes, which the XML writer converts into annoying
            # \0xfffd characters - we'll strip these out to make the XML a bit more readable
            sed -i 's/ï¿½\[[0-9;]*[a-zA-Z]//g' test-reports/*.xml || true
      - store_artifacts:
          path: test-reports
      - store_test_results:
          path: test-reports

  remote_docker:
    steps:
      - setup_remote_docker:
          version: 20.10.12
      - run: docker version

  create_and_scan_docker_image:
    steps:
      - remote_docker
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: create and scan docker image
          command: |
            set -x
            if [[ "$CIRCLE_BRANCH" = "main" || "$CIRCLE_BRANCH" = "canary" ]]; then
              # TODO change to all once dockerhub repo is ready
              export DOCKER_REGISTRY=ecr
            else
              # this is how we tell CCC not to actually publish
              export DOCKER_REGISTRY=none
            fi

            publish

  notify_slack:
    parameters:
      version:
        type: string
    steps:
      - run:
          name: Slack Notification
          command: |
            # Provide error if no webhook is set and error. Otherwise continue
            if [ -z "${SLACK_WEBHOOK}" ]; then
              echo '$SLACK_WEBHOOK not set'
              exit 1
            fi

            version=$(<docker_image.tag)
            message=$(git show HEAD --no-patch --format=%s | jq -R '.' | sed -e 's/^"//' -e 's/"$//')

            cat \<< EOF | tee /tmp/slack-webhook-body
            {
            	"blocks": [
            		{
            			"type": "header",
            			"text": {
            				"type": "plain_text",
            				"text": "Helm deployment triggered",
            				"emoji": true
            			}
            		},
            		{
            			"type": "section",
            			"fields": [
            				{
            					"type": "mrkdwn",
            					"text": "*Project:*\n$CIRCLE_PROJECT_REPONAME"
            				},
            				{
            					"type": "mrkdwn",
            					"text": "*Author:*\n$CIRCLE_USERNAME"
            				}
            			]
            		},
            		{
            			"type": "section",
            			"fields": [
            				{
            					"type": "mrkdwn",
            					"text": "*Version:*\n<<parameters.version>>"
            				},
            				{
            					"type": "mrkdwn",
            					"text": "*CircleCI Build:*\n<$CIRCLE_BUILD_URL|$CIRCLE_BUILD_NUM>"
            				}
            			]
            		},
            		{
            			"type": "section",
            			"text": {
            				"type": "mrkdwn",
            				"text": "*Commit Message:*\n$message"
            			}
            		}
            	]
            }
            EOF

            curl --fail -H 'Content-type: application/json' \
                --data @/tmp/slack-webhook-body "${SLACK_WEBHOOK}"

  notify_honeycomb:
    steps:
      - run:
          name: Notify Honeycomb
          command: |
            cat \<< EOF | tee /tmp/honeycomb-marker
            {
              "message": "Deploying machine-provisioner $(<docker_image.tag)",
              "type":"deploy"
            }
            EOF
            curl https://api.honeycomb.io/1/markers/execution \
              -H "X-Honeycomb-Team: $HONEYCOMB_WRITEKEY" \
              -d @/tmp/honeycomb-marker

  notify_failing_main:
    steps:
    - slack/notify:
        channel: fleets-alerts
        branch_pattern: main
        event: fail
        template: basic_fail_1
