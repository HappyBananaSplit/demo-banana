version: 2.1

orbs:
  codecov: codecov/codecov@1.2.2

executors:
  # Base Docker image for Clojure services
  # https://github.com/circleci/clojure-service-image
  clj:
    docker:
      - image: circleci/clojure-service:java11-0.8-dev
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
  clj-rmq-postgres:
    docker:
      - image: circleci/clojure-service:java11-0.8-dev
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
        environment:
          DATABASE_URL: "jdbc:postgresql://localhost:5432/smoke_test_db?user=smoke_test_user&password=smoke_test_pass"
          DATABASE_MIGRATIONS: sql
      - image: rabbitmq:3.8.19-management-alpine
        environment:
          RABBITMQ_NODE_PORT: 5272
      - image: postgres:12-alpine
        environment:
          POSTGRES_USER: smoke_test_user
          POSTGRES_DB: smoke_test_db
          POSTGRES_PASSWORD: smoke_test_pass
  # Secondary container for testing PostgreSQL migrations.
  postgres:
    docker:
      - image: circleci/clojure-service:java11-0.8-dev
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
        environment:
          DATABASE_URL: "jdbc:postgresql://localhost:5432/smoke_test_db?user=smoke_test_user&password=smoke_test_pass"
          DATABASE_MIGRATIONS: sql
      - image: postgres:12-alpine
        environment:
          POSTGRES_USER: smoke_test_user
          POSTGRES_DB: smoke_test_db
          POSTGRES_PASSWORD: smoke_test_pass
  # Docker image for container-related shorthands
  # https://github.com/circleci/command-convenience-containers
  ccc:
    docker:
      - image: circleci/command-convenience:0.1
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD

commands:
  restore-deps:
    description: "Restore maven deps from cache and run lein deps"
    steps:
      - restore_cache:
          keys:
            - maven-{{ checksum "project.clj" }}
            - maven
      - run:
          name: Fetch dependencies
          command: lein with-profile dev deps
  save-deps:
    description: "Save maven deps to cache"
    steps:
      - save_cache:
          key: maven-{{ checksum "project.clj" }}
          paths:
            - ~/.m2

jobs:
  # Initialize the environment by pulling maven dependencies into ~/.m2 and caching them for future
  # steps and future builds.
  init-service:
    executor:
      name: clj
    working_directory: ~/smoke-test-service/service
    steps:
      - checkout:
          path: ~/smoke-test-service
      - restore-deps
      - save-deps

  # Build the uberjar (the standalone JAR file that ends up deployed in production)
  build-service-uberjar:
    executor:
      name: clj
    working_directory: ~/smoke-test-service/service
    steps:
      - checkout:
          path: ~/smoke-test-service
      - restore-deps
      - run:
          name: Build uberjar
          command: |
            lein uberjar
            cp -v target/smoke-test-service-*-standalone.jar target/smoke-test-service-standalone.jar
      - persist_to_workspace:
          root: .
          paths:
            - target/smoke-test-service-standalone.jar

  # Runs linters on the Clojure code
  lint-service:
    executor:
      name: clj
    working_directory: ~/smoke-test-service/service
    steps:
      - checkout:
          path: ~/smoke-test-service
      - restore-deps
      - run: lein clj-kondo
      - run: lein eastwood

  # Runs all the Clojure tests
  test-service:
    executor:
      name: clj-rmq-postgres
    working_directory: ~/smoke-test-service/service
    steps:
      - checkout:
          path: ~/smoke-test-service
      - restore-deps
      # See the project.clj file for the differences between test and test-ci:
      # Usually this means `test` plus coverage and junit output plugins
      - run: run-migrations
      - run: lein test-ci
      - store_test_results:
          path: target/test-results
      - codecov/upload

  test-migrator:
    executor:
      name: postgres
    working_directory: ~/smoke-test-service/service
    steps:
      - checkout:
          path: ~/smoke-test-service
      - run: run-migrations

  # Outputs the helm diff compared to helm's production charts
  dry-run-service:
    executor:
      name: ccc
    environment:
      # These need to match the variables in your deployment job to get a meaningful diff
      NAME: smoke-test-service
      VALUES_FILE: values.yml
    working_directory: ~/smoke-test-service/service
    steps:
      - checkout:
          path: ~/smoke-test-service
      - setup_remote_docker
      - run: /deploy/dry-run

  # Runs a Twistlock/Prisma scan on feature branches
  # See https://github.com/circleci/engineering/blob/master/howto/prisma-scan-for-vulns.md
  scan-service:
    executor:
      name: ccc
    environment:
      NAME: smoke-test-service
      DEPLOY_CLOJURE_JARFILE: target/smoke-test-service-standalone.jar
      DEPLOY_CLOJURE_JARFILE_JAVA_VERSION: 11
      TWISTCLI_DEBUG: true
    working_directory: ~/smoke-test-service/service
    steps:
      - checkout:
          path: ~/smoke-test-service
      - setup_remote_docker
      - attach_workspace:
          at: .
      - run: scan
      - store_artifacts:
          path: ccc-image-scan-results
          destination: smoke-test-service/ccc-image-scan-results

  # Run database migrations before updating the service.
  publish-deploy-migrator:
    executor:
      name: ccc
    environment:
      NAME: smoke-test-service-migrator
      MIGRATIONS_SQL_PATH: sql
      DOCKER_REGISTRY: all
      VALUES_FILE: sql/values.yml
    working_directory: ~/smoke-test-service/service
    steps:
      - checkout:
          path: ~/smoke-test-service
      - setup_remote_docker
      - attach_workspace:
          at: .
      - run: publish
      - run: deploy

  # Publishes to ECR/Docker Hub and deploys the service on main branch
  publish-deploy-service:
    executor:
      name: ccc
    environment:
      NAME: smoke-test-service
      DEPLOY_CLOJURE_JARFILE: target/smoke-test-service-standalone.jar
      DEPLOY_CLOJURE_JARFILE_JAVA_VERSION: 11
      DOCKER_REGISTRY: all
      VALUES_FILE: values.yml
    working_directory: ~/smoke-test-service/service
    steps:
      - checkout:
          path: ~/smoke-test-service
      - setup_remote_docker
      - attach_workspace:
          at: .
      - run: publish
      - run: deploy

  # Publishes to ECR/Docker Hub and deploys the service on canary branch
  publish-deploy-service-canary:
    executor:
      name: ccc
    environment:
      NAME: smoke-test-service
      DEPLOY_CLOJURE_JARFILE: target/smoke-test-service-standalone.jar
      DEPLOY_CLOJURE_JARFILE_JAVA_VERSION: 11
      DOCKER_REGISTRY: all
      RELEASE_VERSION: canary
      DEPLOY_ENVIRONMENT: canary
      VALUES_FILE: canary.yml
    working_directory: ~/smoke-test-service/service
    steps:
      - checkout:
          path: ~/smoke-test-service
      - setup_remote_docker
      - attach_workspace:
          at: .
      - run: publish
      - run: /deploy/merge-values values.yml canary-overrides.yml > canary.yml
      - run: deploy

  # Skip these jobs if you're using this config as a reference, continue on to the workflows
  # The jobs are for the second service in this project and are clones of the service jobs above
  init-client-service:
    executor:
      name: clj
    working_directory: ~/smoke-test-service/client-service
    steps:
      - checkout:
          path: ~/smoke-test-service
      - restore-deps
      - save-deps

  build-client-service-uberjar:
    executor:
      name: clj
    working_directory: ~/smoke-test-service/client-service
    steps:
      - checkout:
          path: ~/smoke-test-service
      - restore-deps
      - run:
          name: Build uberjar
          command: |
            lein uberjar
            cp -v target/smoke-test-client-service-*-standalone.jar target/smoke-test-client-service-standalone.jar
      - persist_to_workspace:
          root: .
          paths:
            - target/smoke-test-client-service-standalone.jar

  lint-client-service:
    executor:
      name: clj
    working_directory: ~/smoke-test-service/client-service
    steps:
      - checkout:
          path: ~/smoke-test-service
      - restore-deps
      - run: lein clj-kondo
      - run: lein eastwood

  test-client-service:
    executor:
      name: clj-rmq-postgres
    working_directory: ~/smoke-test-service/client-service
    steps:
      - checkout:
          path: ~/smoke-test-service
      - restore-deps
      - run: lein test-ci
      - store_test_results:
          path: target/test-results
      - codecov/upload

  dry-run-client-service:
    executor:
      name: ccc
    environment:
      NAME: smoke-test-client-service
      VALUES_FILE: values.yml
    working_directory: ~/smoke-test-service/client-service
    steps:
      - checkout:
          path: ~/smoke-test-service
      - setup_remote_docker
      - run: /deploy/dry-run

  scan-client-service:
    executor:
      name: ccc
    environment:
      NAME: smoke-test-client-service
      DEPLOY_CLOJURE_JARFILE: target/smoke-test-client-service-standalone.jar
      DEPLOY_CLOJURE_JARFILE_JAVA_VERSION: 11
      TWISTCLI_DEBUG: true
    working_directory: ~/smoke-test-service/client-service
    steps:
      - checkout:
          path: ~/smoke-test-service
      - setup_remote_docker
      - attach_workspace:
          at: .
      - run: scan
      - store_artifacts:
          path: ccc-image-scan-results
          destination: smoke-test-client-service/ccc-image-scan-results

  publish-deploy-client-service:
    executor:
      name: ccc
    working_directory: ~/smoke-test-service/client-service
    environment:
      NAME: smoke-test-client-service
      DEPLOY_CLOJURE_JARFILE: target/smoke-test-client-service-standalone.jar
      DEPLOY_CLOJURE_JARFILE_JAVA_VERSION: 11
      DOCKER_REGISTRY: all
      VALUES_FILE: values.yml
      ATOMIC_DEPLOY: true # temporarily set for testing atomic deploy CCC feature
      ATOMIC_TIMEOUT: "5m"
    steps:
      - checkout:
          path: ~/smoke-test-service
      - setup_remote_docker
      - attach_workspace:
          at: .
      - run:
          name: Set correct Rollbar access token
          command: |
            echo "export ROLLBAR_ACCESS_TOKEN=$ROLLBAR_ACCESS_TOKEN_CLIENT_SERVICE" >> "${BASH_ENV}"
      - run: publish
      - when:
          condition:
            not: # exclusive rather than inclusive to protect against branches being renamed
              equal: [main, << pipeline.git.branch >>]
          steps:
            - run:
                name: Configure canary
                command: |
                  # These override default values from CCC and the executor.
                  echo "export RELEASE_VERSION=canary" >> "${BASH_ENV}"
                  echo "export DEPLOY_ENVIRONMENT=canary" >> "${BASH_ENV}"
                  echo "export VALUES_FILE=canary.yml" >> "${BASH_ENV}"
                  /deploy/merge-values values.yml canary-overrides.yml > canary.yml
      - run: deploy

workflows:
  deploy:
    jobs:
      - init-service:
          context: org-global
      - build-service-uberjar:
          context: org-global
          requires:
            - init-service
      - lint-service:
          context: org-global
          requires:
            - init-service
      - test-service:
          context: org-global
          requires:
            - init-service
      - test-migrator:
          context: org-global
          requires:
            - init-service
      - dry-run-service:
          context: org-global
          requires:
            - init-service
          filters:
            branches:
              # diffs are included automatically by actual deploys
              ignore:
                - main
                - canary
      - scan-service:
          context: org-global
          requires:
            - build-service-uberjar
          filters:
            branches:
              # fret not, scans are run on main as part of the real publish
              ignore:
                - main
                - canary
      - publish-deploy-migrator:
          context: org-global
          requires:
            - build-service-uberjar
            - lint-service
            - test-service
            - test-migrator
            # configuration for a single service won't have the following jobs
            - build-client-service-uberjar
            - lint-client-service
            - test-client-service
          filters:
            branches:
              only:
                # Migrations aren't run for canaries because you can only roll forwards.
                - main
      - publish-deploy-service:
          context:
            - org-global
          requires:
            - publish-deploy-migrator
            - build-service-uberjar
            - lint-service
            - test-service
            - test-migrator
            # configuration for a single service won't have the following jobs
            - build-client-service-uberjar
            - lint-client-service
            - test-client-service
          filters:
            branches:
              only:
                - main
      - publish-deploy-service-canary:
          context:
            - org-global
          requires:
            - publish-deploy-migrator
            - build-service-uberjar
            - lint-service
            - test-service
            - test-migrator
          filters:
            branches:
              only:
                - canary

      # Skip these jobs if you're using this config as a reference
      # These are for the second service in this project and are clones of the jobs above
      - init-client-service:
          context: org-global
      - build-client-service-uberjar:
          context: org-global
          requires:
            - init-client-service
      - lint-client-service:
          context: org-global
          requires:
            - init-client-service
      - test-client-service:
          context: org-global
          requires:
            - init-client-service
      - dry-run-client-service:
          context: org-global
          requires:
            - init-client-service
          filters:
            branches:
              ignore:
                - main
      - scan-client-service:
          context: org-global
          requires:
            - build-client-service-uberjar
          filters:
            branches:
              ignore:
                - main
                - canary-client-service
      - publish-deploy-client-service:
          context: org-global
          requires:
            - build-service-uberjar
            - lint-service
            - test-service
            - test-migrator
            - build-client-service-uberjar
            - lint-client-service
            - test-client-service
          filters:
            branches:
              only:
                - main
                - canary-client-service
