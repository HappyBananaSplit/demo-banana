version: 2.1

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build-and-test:
          context: org-global
      - build-uberjar:
          context: org-global
      - helm-package:
          context: org-global
      - docker-image:
          context: org-global
          requires:
            - build-uberjar
      - deploy:
          context: org-global
          requires:
            - build-and-test
            - docker-image
            - helm-package
          filters:
            branches:
              only: master
      - deploy-canary:
          context: org-global
          requires:
            - build-and-test
            - docker-image
            - helm-package
          filters:
            branches:
              only: canary

references:
  restore-m2-cache: &restore-m2-cache
    restore_cache:
      keys:
        - v1-jars-{{ checksum "project.clj" }}
        - v1-jars-
  download-dependencies: &download-dependencies
    run:
      name: Download dependencies
      # Development has a dependency on circleci/circle:...-with-tests,
      # building an uberjar only needs a regular circleci/circle dependency.
      # Need to run lein deps with the `dev` profile for tests and without the
      # `dev` profile in order to fetch both variants of circleci/circle.
      command: lein with-profile default:-dev deps
  save-m2-cache: &save-m2-cache
    save_cache:
      key: v1-jars-{{ checksum "project.clj" }}
      paths:
        - /root/.m2
  clojure-image: &clojure-image circleci/clojure-service:0.7-dev
  ccc-image: &ccc-image circleci/command-convenience:0.1
  hub-auth: &hub-auth
    auth:
      username: $DOCKER_HUB_USER
      password: $DOCKER_HUB_PASSWORD
  helm-vars: &helm-vars
    NAME: artifacts-service
    DEPLOY_TYPE: helm
    DEPLOY_CONTAINER_NAME: 183081753049.dkr.ecr.us-east-1.amazonaws.com/circleci/artifacts-service
    CUSTOM_CHART: charts/artifacts-service

executors:
  ccc:
    docker:
      - image: *ccc-image
        <<: *hub-auth
    working_directory: /code

jobs:
  build-and-test:
    docker:
      - image: *clojure-image
        <<: *hub-auth
      - image: mongo:4.2
        command: mongod
      - image: selenium/standalone-chrome:2.53.1
      - image: minio/minio
        name: minio
        environment:
          MINIO_ACCESS_KEY: 'minio'
          MINIO_SECRET_KEY: 'minio123'
        command: ['server', '/data', '--address', ':9123']
    environment:
      # build-agent sets CIRCLE_ENV to point at a BASH_ENV-style file. This
      # messes up circleci/circle's environment detection which breaks its
      # ability to locate the secrets edn file.
      CIRCLE_ENV: development
      ARTIFACTS_REMOTE_WEBDRIVER: "localhost:4444"
      AWS_DEFAULT_REGION: http://minio:9123
    working_directory: /code
    steps:
      - checkout
      - *restore-m2-cache
      - *download-dependencies
      - *save-m2-cache
      - run:
          name: Install dnsmasq
          command: |
            apt-get update
            apt-get install -y dnsmasq
      - run:
          name: Configure dnsmasq
          command: |
            # set up all of *.circlehost-artifacts to resolve to localhost on
            # the local dnsmasq
            # and also alias mongodb for compatibility with local docker
            tee /etc/dnsmasq.conf \<<EOF
            no-resolv
            server=$(grep nameserver /etc/resolv.conf  | egrep '[0-9.]+' -o | head -n 1)
            address=/circlehost-artifacts/127.0.0.1
            address=/mongodb/127.0.0.1
            EOF

            # use the  local dnsmasq to resolve names
            tee /etc/resolv.conf \<<EOF
            nameserver 127.0.0.1
            EOF
      - run:
          name: dnsmasq
          command: dnsmasq --user=root --keep-in-foreground --log-facility=-
          background: true
      - run:
          name: Run tests
          command: lein test :all
      - store_test_results:
          path: target/test-results
      - store_artifacts:
          path: target/test-results
          destination: raw-test-results

  build-uberjar:
    docker:
      - image: *clojure-image
        <<: *hub-auth
    working_directory: /code
    steps:
      - checkout
      - *restore-m2-cache
      - *download-dependencies
      - *save-m2-cache
      - run:
          name: Build uberjar
          command: |
            lein change repositories assoc '"circle-s3"' {}
            lein change repositories assoc '"circle-s3-snapshots"' {}
            lein uberjar
            mv target/artifacts-*-standalone.jar target/artifacts-standalone.jar
      - persist_to_workspace:
          root: .
          paths:
            - target/artifacts-standalone.jar
      - store_artifacts:
          path: target/artifacts-standalone.jar

  docker-image:
    executor: ccc
    environment:
      NAME: artifacts-service
      DOCKERFILE_PATH: 'Dockerfile'
      TWISTLOCK_ENFORCE: "true"
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_remote_docker
      - run:
          name: Build, scan and maybe publish image
          command: |
            set -x
            if [[ "$CIRCLE_BRANCH" = "master" || "$CIRCLE_BRANCH" = "canary" ]]; then
              export DOCKER_REGISTRY=all
            else
              # this is how we tell CCC not to actually publish
              export DOCKER_REGISTRY=none
            fi

            publish
      - store_artifacts:
          path: ccc-image-scan-results
      - persist_to_workspace:
          root: .
          paths:
            - docker_image.tag

  helm-package:
    executor: ccc
    steps:
      - checkout
      - run:
          name: Validate Helm packaging
          command: |
            /deploy/scripts/dry-run.sh | tee helm-package.txt
          environment:
            NAME: artifacts-service
            DEPLOY_CONTAINER_NAME: example.com/circleci/artifacts-service
            CUSTOM_CHART: charts/artifacts-service
      - store_artifacts:
          path: helm-package.txt

  deploy:
    executor: ccc
    environment:
      <<: *helm-vars
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Helm deploy
          command: deploy

  deploy-canary:
    executor: ccc
    environment:
      <<: *helm-vars
      RELEASE_VERSION: "canary"
      ROLLBAR_ENVIRONMENT: canary
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Substitute Helm chart values
          command: |
            sed -i'.bak' 's/canary: false/canary: true/' charts/artifacts-service/values.yaml
      - run:
          name: Helm deploy
          command: deploy
